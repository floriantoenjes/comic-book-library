@model ComicBookShared.Models.ComicBook

@{
    ViewBag.Title = "Comic Book Detail";

    bool isFavorite()
    {
        return Model.UsersWhoChoseAsFavorite.Select(u => u.UserName).Any(n => n == User.Identity.Name);
    }
}

@Html.Partial("_Message")

<h2>@Model.DisplayText</h2>

<h3>Main Information</h3>

<div class="row">
    <div class="col-md-6">

        <div class="row">
            <div class="col-xs-4 col-sm-4">
                @Html.LabelFor(m => m.SeriesId)
            </div>
            <div class="col-xs-8 col-sm-8">
                @Model.Series.Title
            </div>
        </div>

        <div class="row">
            <div class="col-xs-4 col-sm-4">
                @Html.LabelFor(m => m.IssueNumber)
            </div>
            <div class="col-xs-8 col-sm-8">
                @Model.IssueNumber
            </div>
        </div>

        <div class="row">
            <div class="col-xs-4 col-sm-4">
                @Html.LabelFor(m => m.PublishedOn)
            </div>
            <div class="col-xs-8 col-sm-8">
                @Model.PublishedOn.ToShortDateString()
            </div>
        </div>

        <div class="row">
            <div class="col-xs-4 col-sm-4">
                @Html.LabelFor(m => m.AverageRating)
            </div>
            <div class="col-xs-8 col-sm-8">
                @(Model.AverageRating != null ? Model.AverageRating.Value.ToString("n1") : "N/A")
            </div>
        </div>

    </div>
    <div class="col-md-6">

        <div>
            @Html.LabelFor(m => m.Description)
        </div>
        <div>
            @(!string.IsNullOrWhiteSpace(Model.Description) ? Model.Description : "N/A")
        </div>

    </div>
</div>

<h3>Artists</h3>

<div class="pull-right">
    <a href="@Url.Action("Add", "ComicBookArtists", new { comicbookid = Model.Id })" class="btn btn-primary">
        <span class="glyphicon glyphicon-plus"></span> Add Artist
    </a>
</div>

<table class="table table-striped table-condensed">
    <thead>
        <tr>
            <th>Role</th>
            <th>Artist</th>
            <th>&nbsp;</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var artist in Model.Artists)
        {
            <tr>
                <td>@artist.Role.Name</td>
                <td>@artist.Artist.Name</td>
                <td>
                    <div class="pull-right">
                        <a href="@Url.Action("Delete", "ComicBookArtists", new { comicbookid = Model.Id, id = artist.Id })" class="btn btn-danger btn-xs margin-right">
                            <span class="glyphicon glyphicon-trash"></span><span class="hidden-xs"> Delete</span>
                        </a>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="pad-top">
    <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-primary btn-lg margin-right">
        <span class="glyphicon glyphicon-edit"></span> Edit
    </a>
    <a href="@Url.Action("Delete", new { id = Model.Id })" class="btn btn-danger btn-lg margin-right">
        <span class="glyphicon glyphicon-trash"></span> Delete
    </a>
    <a href="@Url.Action("Index")" class="btn btn-default btn-lg">
        <span class="glyphicon glyphicon-step-backward"></span> Back
    </a>
    @if (User.Identity.IsAuthenticated)
    {
        <div class="pull-right">

            <button class="remove-favorite btn btn-danger btn-lg" onclick="removeFavorite(@Model.Id)"
                    style="display: @(isFavorite() ? " " : "none") ">
                <span class="glyphicon glyphicon-star"></span> Remove Favorite
            </button>

            <button class="add-favorite btn btn-success btn-lg" onclick="addFavorite(@Model.Id)"
                    style="display: @(isFavorite() ? "none" : " ") ">
                <span class="glyphicon glyphicon-star-empty"></span> Add Favorite
            </button>

        </div>
    }
</div>

<script>
    function addFavorite(id) {
        $('.add-favorite').prop("disabled", true);
        createAddFavoriteCall(id).done((success) => {
            if (success) {
                $(".remove-favorite").show();
                $(".add-favorite").hide();
                $('.add-favorite').prop("disabled", false);
            }
        }).fail((error) => {
            alert('Request to add favorite timed out');
            $('.add-favorite').prop("disabled", false);
        });
    }

    function removeFavorite(id) {
        $('.remove-favorite').prop("disabled", true);
        createRemoveFavoriteCall(id).done((success) => {
            if (success) {
                $(".remove-favorite").hide();
                $('.remove-favorite').prop("disabled", false);
                $(".add-favorite").show();
            }
        }).fail((error) => {
            alert('Request to remove favorite timed out');
            $('.remove-favorite').prop("disabled", false);
        });
    }
</script>

